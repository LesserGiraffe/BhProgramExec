/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_java_projects.html
 */

//============================= How to Compile =============================
// cd directory-this-file-is-in
// ./gradlew prepareJFX  # if not use Liberica JDK, excute this
// ./gradlew prepareLibs
// ./gradlew runApp
//==========================================================================

import java.util.regex.*
import java.nio.file.*

plugins {
	// Apply the java plugin to add support for Java
	id 'java'

	// Apply the application plugin to add support for building an application
	id 'application'
}

repositories {
	// Use jcenter for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()
}

dependencies {
	compile group: 'org.mozilla', name: 'rhino', version: '1.7.11'
}

// Define the main class for the application
ext.jarName = 'BhProgramExecEnvironment.jar'
ext.mainClass = 'net.seapanda.bunnyhop.programexecenv.BhProgramExecEnvironment'
ext.USR_HOME = System.getProperty('user.home')
ext.JDK_VER = 11 //8 or 11
ext.ps = File.pathSeparator
ext.fs = File.separator
ext.projName = 'BhProgramExecEnvironment'


/**
 * JARライブラリからモジュールを作成する
 * @param libFilePath Modular JAR にしたい JAR ファイルのパス
 */
def createModFromJar(libFilePath) {
	
	def libFileName = Paths.get(libFilePath).getFileName()
	println libFileName
	def modFileName = libFileName
	
	// モジュールファイルが存在する場合は実行しない
	if (!file("$projectDir/mlib/$modFileName").exists()) {

		def output = new ByteArrayOutputStream()
		exec {
			commandLine ((USR_HOME + '/java/' + JDK_VER + '/jdk/bin/jdeps'),
						'--module-path', "$projectDir/lib",
						'--generate-module-info', "$projectDir/lib/moduleInfo", "$libFilePath")
			standardOutput = output
		}
		
		// [writing to PATH/モジュール名/module-info.java] と出力される行からモジュール名を抜き出す
		def line = (output.toString() =~ /^.+module-info.java/)[0]
		def modName = line.split(Pattern.quote(fs))[-2]
		
		exec {
			commandLine ((USR_HOME + '/java/' + JDK_VER + '/jdk/bin/javac'),
						'--patch-module', "$modName=$libFilePath",
						'--module-path', "$projectDir/lib",
						"$projectDir/lib/moduleInfo/$modName/module-info.java")
		}
		ant.copy(tofile: "$projectDir/mlib/$modFileName") {
			fileset(file: "$libFilePath")
		}
		exec {
			commandLine ((USR_HOME + '/java/' + JDK_VER + '/jdk/bin/jar'),
						 'uf', "$projectDir/mlib/$modFileName", '-C', "$projectDir/lib/moduleInfo/$modName", 'module-info.class')
		}

		delete "$projectDir/lib/moduleInfo/$modName"
	}
}

task copyDependencies(type: Copy) {

	from configurations.default
	into 'lib'
	
	doFirst {
		delete "$projectDir/lib/"
		delete "$projectDir/mlib/"
	}
}

// ライブラリの準備
task prepareLibs {

	dependsOn 'copyDependencies'
	
	doFirst {
		FileTree ftree = fileTree("$projectDir/lib")
		ftree.visit {element ->
			def filePath = element.file.toString()
			if (filePath ==~ /.+\.jar$/) {
				createModFromJar(filePath)
			}
		}
	}
}

compileJava {

	doFirst {

		options.fork = true
		options.forkOptions.executable = USR_HOME + '/java/' + JDK_VER + '/jdk/bin/javac'

		if (JDK_VER >= 11) {
			options.sourcepath = files("$projectDir/src/main/java")
			options.compilerArgs = [
				'-source', JDK_VER,
				'-target', JDK_VER,
				'-encoding', 'UTF8',
				'--module-path', "$projectDir/mlib",
			]
			classpath = files()
		}
		else {
			sourceSets {
				main {
					java {
						exclude 'module-info.java'
					}
				}
			}

			options.sourcepath = files("$projectDir/src/main/java")
			sourceCompatibility = JDK_VER
    		targetCompatibility = JDK_VER
			options.compilerArgs = [
				'-encoding', 'UTF8',
			]
		}
	}
}

task createJar(type:Exec) {

	dependsOn 'compileJava'
	doFirst {

		ant.mkdir(dir:"$projectDir/$JDK_VER")
		if (JDK_VER >= 11) {
			commandLine ((USR_HOME + '/java/' + JDK_VER +'/jdk/bin/jar'),
						'--create',
						'--file', "$projectDir/$JDK_VER/$jarName",
						'--main-class', "$mainClass",
						'--module-version', '1.0',
						'-C', "$projectDir/build/classes/java/main", '.')
		}
		else {
			commandLine ((USR_HOME + '/java/' + JDK_VER +'/jdk/bin/jar'),
						'cfe',
						"$projectDir/$JDK_VER/$jarName",
						"$mainClass",
						'-C', "$projectDir/build/classes/java/main", '.')
		}
	}
}

task runApp(type: JavaExec) {

	dependsOn 'createJar'
	doFirst {
		executable = USR_HOME + '/java/' + JDK_VER + '/jdk/bin/java'
		main = ''
		jvmArgs = [
			'-cp', ("$projectDir/mlib/*" + ps + "$projectDir/$JDK_VER/$jarName"),
			"$mainClass"
		]
		classpath = files()
	}
}

